#!/bin/bash

zfs_versions=0.8.1
userland_only=false
kernel_releases=
src_dir=$PWD/src
out_dir=$PWD/out
archive_dir=$out_dir/archive
build_dir=$out_dir/build
force=false
zfs_builder=titandata/zfs-builder:develop

function usage() {
  echo "Usage: $0 [-u] [kernel_release ...]" 1>&2
  exit 2
}

function die() {
  echo $* 1>&2
  exit 1
}

while getopts ":ufz:" o; do
  case "${o}" in
    u)
      userland_only=true
      ;;
    f)
      force=true
      ;;
    z)
      zfs_versions=$OPTARG
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND-1))
kernel_releases=$*
[[ -z $kernel_releases ]] && kernel_releases=$(ls -1 $src_dir)

mkdir -p $archive_dir || exit 1
mkdir -p $build_dir || exit 1
for version in $zfs_versions; do
  echo "Building ZFS version $version"
  first=true
  for release in $kernel_releases; do
    echo "Building kernel version $release"
    [[ -d $src_dir/$release ]] || die "Unknown kernel release $release"
    [[ -f $src_dir/$release/uname ]] || die "Missing uname file for $release"

    if [[ $userland_only = true ]]; then
      zfs_config=user
    elif [[ $first = true ]]; then
      zfs_config=all
    else
      zfs_config=kernel
    fi

    mkdir -p $build_dir/$release || exit 1
    kernel_archive=zfs-$version-$release.tar.gz
    userland_archive=zfs-$version-userland.tar.gz

    if [[ -f $archive_dir/$kernel_archive && $force = false ]]; then
        echo "Archive $kernel_archive already exists, skipping"
    else
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock --network=host \
          -e ZFS_VERSION=zfs-$version -e KERNEL_RELEASE=$release \
          -e KERNEL_UNAME="$(cat $src_dir/$release/uname)" -e ZFS_CONFIG=$zfs_config \
          -v $src_dir/$release:/config -v $build_dir/$release:/build \
          $zfs_builder || exit 1
    fi

    cd $build_dir/$release

    if [[ $zfs_config != kernel ]]; then
        if [[ -f $archive_dir/$userland_archive && $force = false ]]; then
            echo "Archive $userland_archive already exists, skipping"
        else
            echo "Creating userland archive $userland_archive"
            tar -czf $archive_dir/$userland_archive \
              --exclude lib/modules --exclude lib/udev --exclude "lib/libzpool.*" \
              --exclude sbin/zdb --exclude sbin/ztest sbin lib || exit 1
        fi
    fi

    first=false
    [[ $userland_only = true ]] && break

    if [[ ! -f $archive_dir/$kernel_archive ]]; then
        echo "Creating kernel archive $kernel_archive"
        tar -czf $archive_dir/$kernel_archive lib/modules || exit 1
    fi
  done
done
exit 0
